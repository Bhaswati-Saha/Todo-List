{"version":3,"sources":["logo.svg","ListItems.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","items1","deleteItem","setUpdate","listItems","map","item","className","key","type","id","value","text","onChange","e","target","icon","onClick","duration","easing","search","searchfield","searchChange","placeholder","library","add","faTrash","App","props","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","items","filteredItems","filter","onSearchChange","this","toLowerCase","includes","onSubmit","required","SearchBox","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","name","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23b67ea0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';//for animation\r\nconst List=({items1,deleteItem,setUpdate})=>{\r\n\tconst listItems=items1.map(item=>\r\n\t{\r\n\t\treturn <div className=\"list\" key={item.key}>\r\n          <p>\r\n          <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>setUpdate(e.target.value,item.key)}/>\r\n           \r\n          <span>\r\n             <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={()=>deleteItem(item.key)}/>\r\n           </span>\r\n           </p>\r\n\r\n\r\n\t\t</div>\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n\t\t{listItems}\r\n\t\t</FlipMove>\r\n\t\t</div>\r\n\t\t)\r\n\r\n}\r\nexport default List;","import React from 'react';\r\nconst search=({searchfield,searchChange})=>{\r\n\treturn( \r\n\t\t<div className=\"ph5\">\r\n\t\t<input type=\"search\" placeholder=\"Search Items\" onChange={searchChange} />\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default search;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems.js';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nimport SearchBox from './SearchBox.js';\nlibrary.add(faTrash);\n\n\n/*function App({name})\n{\n\n  //const {name}=props;\n  return (\n    <div className=\"f1 tc\">\n     <h1>{`Hello ${name}`}</h1>\n     </div>\n    );\n  \n}*/\n/*class App extends React.Component{\n  render(){\n    const {name}=this.props;\n\n    return <h1>Hello ,{name}</h1>;\n  }\n}*/\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n          items:[],\n          currentItem:{\n            text:'',\n            key:''\n          },\n          searchfield:''\n    }\n    /*this.handleInput=this.handleInput.bind(this);\n    this.addItem=this.addItem.bind(this);\n    this.deleteItem=this.deleteItem.bind(this);\n    this.setUpdate=this.setUpdate.bind(this);*/\n  }\n  handleInput=(e)=>{\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  addItem=(e)=>{\n    e.preventDefault();//prevents the page from refreshing on clicking add button\n    const newItem=this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text!==\"\")\n    {\n      /*it signifies array destructuring that is if previously items array has \n      2 objects (i.e. items) then newItems[0] contains the first object of items array and newItems[1] contains second object of items \n      array and newItems[2] now has newItem*/\n      const newItems=[...this.state.items,newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n  \n  deleteItem=(key)=>\n  {\n    const filteredItems=this.state.items.filter(item=>\n      item.key!==key);\n    this.setState({\n      items:filteredItems\n    })\n\n  }\n  setUpdate=(text,key)=>\n  {\n    const {items}=this.state;\n    items.map(item=>{\n      if(item.key===key)\n        item.text=text;\n\n    })\n    this.setState({items:items})\n  }\n  onSearchChange=(e)=>\n  {//here this refers to App(i.e. the class)\n        this.setState({searchfield:e.target.value});\n  }\n /*onSearchChange=(e)=>\n       {\n        const {items,searchfield}=this.state;\n        this.setState({searchfield:e.target.value});\n        const filteredItems=items.filter(item=>{\n          return item.text.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        \n        this.setState({\n      items:filteredItems\n       })\n          \n        \n       }*/\n  render(){\n\n    const {items,searchfield}=this.state;\n    const filteredItems=items.filter(item=>{\n          return item.text.toLowerCase().includes(searchfield.toLowerCase());\n        })\n\n    return(\n      <div className=\"App\">\n      <header>\n          <h1>Todo List</h1>\n          <form id=\"to-do-list\" onSubmit={this.addItem}>\n              <input type=\"text\" placeholder=\"Enter text\" required value={this.state.currentItem.text} onChange={this.handleInput}/>\n              <button type=\"submit\">Add</button>\n              <SearchBox searchChange={this.onSearchChange} />\n          </form>\n      </header>\n      <ListItems items1={filteredItems} deleteItem={this.deleteItem} setUpdate={this.setUpdate}></ListItems>\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App name={`Bhaswati`}/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}